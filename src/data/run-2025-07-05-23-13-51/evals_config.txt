{'eval_has_escape_clause': {'func': <function get_logs.<locals>.decorator.<locals>.wrapper at 0x000001FA3FE1E840>,
                            'template': ChatPromptTemplate(input_variables=['req'], input_types={}, partial_variables={}, messages=[SystemMessagePromptTemplate(prompt=PromptTemplate(input_variables=[], input_types={}, partial_variables={}, template='Step 1 - The user will hand over a Requirement, Criteria, and Examples. Your task is to revise the Requirement as per the provided Criteria and Examples, starting with the phrase "Initial Revision:".\nStep 2 - Compare the initial revision performed in Step 1 against the criteria to determine if any additional revisions are necessary. Let\'s think step-by-step.\nStep 3 - Return the final requirement revision based on Steps 1 and 2, starting with the phrase "Final Revision:".'), additional_kwargs={}), HumanMessagePromptTemplate(prompt=PromptTemplate(input_variables=['req'], input_types={}, partial_variables={}, template='Requirement: {req}\nCriteria:\n Avoid the inclusion of escape clauses that state vague conditions or possibilities, such as “so far as is possible”, “as little as possible”, “where possible”, “as much as possible”, “if it should prove necessary”, “if necessary”, “to the extent necessary”, “as appropriate”, “as required”, “to the extent practical”, and “if practicable”. \nExamples:\n Unacceptable: The GPS shall, where there is sufficient space, display the User_Location in accordance with <Display Standard xyz>. [This is unacceptable because whether there is sufficient space is vague, ambiguous, and unverifiable. The requirement is clearer without the escape clause.] Improved: The GPS shall display the User_Location in accordance with <Display Standard XYZ>. [Note that appropriate performance measures must also be specified such as within what time, format, and accuracy. Also note that “GPS” and “User_Location” must be defined in the glossary or data dictionary.] 4'), additional_kwargs={})])},
 'eval_has_vague_terms': {'func': <function get_logs.<locals>.decorator.<locals>.wrapper at 0x000001FA3FE1E700>,
                          'template': ChatPromptTemplate(input_variables=['req'], input_types={}, partial_variables={}, messages=[SystemMessagePromptTemplate(prompt=PromptTemplate(input_variables=[], input_types={}, partial_variables={}, template='Step 1 - The user will hand over a Requirement, Criteria, and Examples. Your task is to revise the Requirement as per the provided Criteria and Examples, starting with the phrase "Initial Revision:".\nStep 2 - Compare the initial revision performed in Step 1 against the criteria to determine if any additional revisions are necessary. Let\'s think step-by-step.\nStep 3 - Return the final requirement revision based on Steps 1 and 2, starting with the phrase "Final Revision:".'), additional_kwargs={}), HumanMessagePromptTemplate(prompt=PromptTemplate(input_variables=['req'], input_types={}, partial_variables={}, template='Requirement: {req}\nCriteria:\n Avoid the use of vague terms. \nExamples:\n Unacceptable: The <SOI> shall usually be online. [This is unacceptable because “usually” is ambiguous - is availability what is meant?] Improved: The <SOI> shall have an Availability of greater than xx% over a period of greater than yyyy hours. [Note that “Availability” must be defined in the glossary or data dictionary since there are a number of possible ways of calculating that measure. Alternately, the availability could be expressed as a need. Then the organization responsible for transforming the need into a requirement could develop feasible concepts for meeting the needed availability and derived one or more well-formed requirements that result in the need being met.] Unacceptable: The Flight_Information_System shall display per <Display Standard xyz> the Tracking_Information for relevant aircraft within <xxxx seconds> of detection. [This is unacceptable because it does not make explicit which aircraft are relevant. Additionally, the statement allows the developer to decide what is relevant; such decisions are in the province of the customer, who should make the requirement explicit.] Improved: The Flight_Information_System shall display per <Display Standard xyz> the Tracking_Information of each Aircraft located less than or equal to 20 kilometers from the Airfield when in the Operations_Mode within <xxxx seconds> of detection. [Now it is clear for which aircraft the information needs to be displayed. Note that “Aircraft”, “Tracking_Information”, “Airfield”, and “Operations_Mode” must be defined in the glossary or data dictionary.] '), additional_kwargs={})])},
 'eval_if_vague_verb': {'func': <function get_logs.<locals>.decorator.<locals>.wrapper at 0x000001FA3FE1E480>,
                        'template': ChatPromptTemplate(input_variables=['req'], input_types={}, partial_variables={}, messages=[SystemMessagePromptTemplate(prompt=PromptTemplate(input_variables=[], input_types={}, partial_variables={}, template='Step 1 - The user will hand over a Requirement, Criteria, and Examples. Your task is to revise the Requirement as per the provided Criteria and Examples, starting with the phrase "Initial Revision:".\nStep 2 - Compare the initial revision performed in Step 1 against the criteria to determine if any additional revisions are necessary. Let\'s think step-by-step.\nStep 3 - Return the final requirement revision based on Steps 1 and 2, starting with the phrase "Final Revision:".'), additional_kwargs={}), HumanMessagePromptTemplate(prompt=PromptTemplate(input_variables=['req'], input_types={}, partial_variables={}, template='Requirement: {req}\nCriteria:\n Ensure the subject and verb of the need or requirement statement are appropriate to the entity to which the statement refers. \nExamples:\n Subject examples: Business management requirements have the form “The <business> shall …”. For example, “ACME_Transport shall …”. Business operations requirements on business elements have the form “The <business element> shall …”. For example, requirements on personnel roles have the form: “The <personnel role> shall …”—such as, “The Production_Manager shall …”; “The Marketing_Manager shall …”. System level needs have the form “The <stakeholders> need the system to ……” System requirements have the form "The <SOI> shall ..."—for example, “The Aircraft shall …” Subsystem level needs have the form “The <stakeholders> need the <subsystem> to ……” Subsystem requirements have the form “The <subsystem> shall …" - for example, once the subsystems are defined: “The Engine shall …”; and “The Landing_Gear shall …”. Verb examples: System level stakeholder need: “The <stakeholders> need the <SOI> to process data received from <other system>.” System level requirement: “The <SOI> shall [process] data received from <another system>. having the characteristics defined in <Interface Definition XYZ.>” Through analysis, the verb/function “process” could be decomposed into sub functions such as “receive”, “store”, “calculate”, “report”, and “display”. Then a decision needs to be made regarding the specific subsystem or system element in which these sub functions are to be performed. If more than one subsystem or system element has a role in performing any one of the sub functions, that requirement should be communicated at the system level and allocated to the applicable subsystems or system elements. If a sub function is to be implemented by a single subsystem or system element, then the sub function requirement should be communicated at the subsystem or system element set of requirements and traced back to the higher-level requirement from which it was decomposed. Unacceptable system requirement: “The User shall ...” [As discussed in Section 1.8, this is unacceptable because the requirement should be on the system, not the user or operator of the system. This wording is often the result of writing requirements directly from user stories or resulting need statements, without doing the Guide to Writing Requirements 69 transformation of the use case or need into a requirement. Ask, what does the system have to do so that the need can be achieved?] Improved: “The <SOI> shall …”. Unacceptable: The <SOI> shall display the Current_Time on the <Display Device> per <Display Standard xyz>. [Again, “Current_Time” and “Display_Device” must be defined in the glossary or data dictionary. This statement is most likely unacceptable because the Display_Device is either a system element which is presumably at a level lower than the SOI (and is therefore not appropriate to this level), or the Display_Device is a system or system element outside the SOI (and therefore should be handled as an interface since requirements cannot be placed on it by this requirement set). The display standard would be developed by the organization that would define standards to be used when displaying all information by all applications the organization develops including fonts, font sizes, colors, spacing, brightness, human factors, etc.] Improved: The <SOI> shall display the Current_Time per <Display Standard xyz>. [This is improved because the action is appropriate to the level of the requirement set. Note that, before being an acceptable statement, appropriate condition and qualifying clauses must be added.] 4'), additional_kwargs={})])},
 'eval_is_in_passive_voice': {'func': <function get_logs.<locals>.decorator.<locals>.wrapper at 0x000001FA3FE1E340>,
                              'template': ChatPromptTemplate(input_variables=['req'], input_types={}, partial_variables={}, messages=[SystemMessagePromptTemplate(prompt=PromptTemplate(input_variables=[], input_types={}, partial_variables={}, template='Step 1 - The user will hand over a Requirement, Criteria, and Examples. Your task is to revise the Requirement as per the provided Criteria and Examples, starting with the phrase "Initial Revision:".\nStep 2 - Compare the initial revision performed in Step 1 against the criteria to determine if any additional revisions are necessary. Let\'s think step-by-step.\nStep 3 - Return the final requirement revision based on Steps 1 and 2, starting with the phrase "Final Revision:".'), additional_kwargs={}), HumanMessagePromptTemplate(prompt=PromptTemplate(input_variables=['req'], input_types={}, partial_variables={}, template='Requirement: {req}\nCriteria:\n Use the active voice in the need statement or requirement statement with the responsible entity clearly identified as the subject of the sentence. \nExamples:\n Unacceptable: The Identity of the Customer shall be confirmed. [This is unacceptable because it does not identify the entity that is responsible/accountable for confirming the identity.] Improved by adding the subject: The Identity of the Customer shall be confirmed by the Accounting_System. [Although this statement makes the subject clear, it is still unacceptable because the statement is in the passive voice in that the entity that is responsible/accountable for recording the audio is at the end of the statement rather than the beginning.] Improved: The Accounting_System shall confirm the Customer_Identity. Guide to Writing Requirements 66 [Note that “Accounting_System”, “confirm”, and “Customer_Identity” must be defined in the glossary since there are a number of possible interpretations of these terms—see R4. Also note that this statement is improved because it is in the active voice but, before it is acceptable, it needs to be further improved through the addition of appropriate condition and qualifying clauses] Unacceptable: While in the Operations_Mode, the Audio having the characteristics defined in <ICD xxxx> shall be recorded. [This is unacceptable because the entity that is responsible/accountable for recording the audio is not stated, which makes it difficult to identify which entity is responsible for the action, or how verification is to occur. In addition, the characteristics of the Audio are not referenced, nor are the conditions under which the action specified.] Improved by adding the subject: While in the Operations_Mode, the Audio having the characteristics defined in <ICD xxxx> shall be recorded by the <SOI>. [Although this statement makes the subject clear, it is still unacceptable because the statement is in the passive voice in that the entity that is responsible/accountable for recording the audio is at the end of the statement rather than the beginning.] Improved: While in the Operations_Mode, the <SOI> shall record Audio having the characteristics defined in <ICD xxxx>. [This is improved because it is in the active voice, but appropriate performance parameters should be added before the statement is acceptable. Also note that “Audio” must be defined in the glossary or data dictionary and required performance added for the requirement to be complete. The characteristics of the Audio received from a <xxxx> source is defined in the ICD.] 4'), additional_kwargs={})])}}